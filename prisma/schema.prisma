// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * User Models
 */

model User {
  id        Int           @id @default(autoincrement())
  email     String        @unique
  password  String
  verified  Boolean       @default(false)
  songLikes SongLike[]
  info      UserInfo?
  sessions  UserSession[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@map("users")
}

model UserInfo {
  userSubId Int
  firstName String?
  lastName  String?
  about     String?
  avatar    String?
  user      User    @relation(fields: [userSubId], references: [id], onDelete: Cascade)

  @@unique([userSubId])
  @@map("user_info")
}

model UserSession {
  sessionId   String   @id @unique @default(uuid())
  userAgent   String
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expire      String
  accessToken String
  createdAt   DateTime @default(now())

  @@map("sessions")
}

/**
 * Song models
 */

model Song {
  songId        String        @id @unique
  originalTitle String
  title         String?
  author        String?
  artist        String?
  duration      Int
  isOfficial    Boolean
  uploadDate    DateTime?
  isDownloading Boolean
  listenedCount Int           @default(0)
  likes         SongLike[]
  cache         SongCache?
  metadata      SongMetadata?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@map("songs")
}

model SongMetadata {
  songId       String
  fileId       String
  fileUniqueId String
  duration     Int
  performer    String
  title        String
  fileName     String
  mimeType     String
  fileSize     String
  thumbnail    Json
  song         Song   @relation(fields: [songId], references: [songId], onDelete: Cascade)

  @@unique([songId])
  @@map("song_metadata")
}

model SongCache {
  songId       String
  buffer       Bytes
  lastAccessed DateTime @default(now())
  song         Song     @relation(fields: [songId], references: [songId], onDelete: Cascade)

  @@unique([songId])
  @@map("song_cache")
}

model SongLike {
  songId String
  userId Int
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  song   Song   @relation(fields: [songId], references: [songId], onDelete: Cascade)

  @@unique([songId, userId])
  @@map("song_likes")
}
